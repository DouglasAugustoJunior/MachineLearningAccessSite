# -*- coding: utf-8 -*-
"""Machine Learning - Access site.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HvRuiHWJRyhRavIASMhCEiScPzPg-8_O

# Verifica usuários compradores no site

Projeto que visa verificar quais usuários que passarão por determinadas páginas do site realizaram a compra de algum produto.
O mesmo utiliza um arquivo CSV como base, dividindo-o em **75%** para treinamento e **25%** para testar a acurácia obtida.
"""

import pandas as pd                                  # biblioteca que permite a leitura de CSVs
from sklearn.svm import LinearSVC                    # Importa a biblioteca do estimador
from sklearn.metrics import accuracy_score           # Importa a biblioteca de acurácia
from sklearn.model_selection import train_test_split # Usado para separar os dados de treino dos de teste


# link do arquivo CSV
uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"

dados = pd.read_csv(uri) # Lê o arquivo CSV
dados.head() # Exibe os 5 primeiros
dados.shape  # Exibe o total de elementos no arquivo

mapa = { 
    "home"         : "principal",
    "how_it_works" : "como_funciona",
    "contact"      : "contato",
    "bought"       : "comprou"
} # Novos nomes das colunas dentro de u dicionário {}

dados = dados.rename(columns = mapa) # Renomeia as colunas do CSV

x= dados[["principal","como_funciona","contato"]] # Pega colunas referente ao X
y= dados["comprou"] # Pega colunas referente ao Y

SEED = 20 # N° Inicial da posição que será usada para separar o CSV em vetores, remove a aleatoriedade

# Popula as 4 variáveis informando que o teste terá 25% dos dados e a semente será o 20, para não ser radomico
train_x, teste_x, train_y, teste_y =train_test_split(x,
                                                     y,
                                                     random_state = SEED,
                                                     test_size =0.25,
                                                     stratify = y) # stratify estratifica os dados para dividir proporcionalmente

print("Treinaremos com %d elementos e testaremos com %d elementos." % (len(train_x), len(teste_x)))

estimador = LinearSVC() # Instância do estimador

#___________________________________________________

estimador.fit(train_x, train_y) # Ensina o estimador com os dados e as classes desses dados

previsoes = estimador.predict(teste_x) # Prediz oque cada item da lista é

acuracia = accuracy_score(teste_y, previsoes) * 100 #valida a acurácia
print("A acurácia foi de: %.2f%%" % acuracia)